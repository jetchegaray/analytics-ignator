<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!-- SirsiDynix Modification -->
    <!--module name="JavadocPackage"/-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <!-- SirsiDynix Modification - makes the check work consistently on Windows as well as *nix -->
        <property name="lineSeparator" value="lf" />
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>
    <!-- SirsiDynix Modification -->
    <!--Don't allow use of BeanFactoryPostProcessor.  This overrides any <aop:config.../> elements in the
        Spring context xml definition file in which the declarations are made for beans whose Java class
        implements BeanFactoryPostProcessor.  Nasty bug to track down - so we just won't allow it.
        The suggested alternative still allows access to the ApplicationContext, and is invoked once
        the whole Spring Context has been initialized. -->
    <module name="RegexpSingleline">
        <property name="format" value="BeanFactoryPostProcessor"/>
        <property name="message" value="SirsiDynix check: BeanFactoryPostProcessor not allowed.  Try using ApplicationListener&lt;ContextRefreshedEvent>" />
    </module>

    <!-- SirsiDynix Modification -->
    <module name="SuppressionCommentFilter">
        <!-- Do NOT remove or comment this section.
             The idea is that we want to SELECTIVELY disable checkstyle checks, which means
             you need to figure out the name of the check to suppress.  If, for example,
             the check is IllegalType, then you would bracket the (hopefully single) line
             of code with:
                  //CHECKSTYLE:OFF IllegalType
                  ... line of code ...
                  //CHECKSTYLE:ON IllegalType
              This prevents us from inadvertently masking other problems caused by
              using the blanket checkstyle off with no specific check being disabled.
         -->
        <property name="offCommentFormat" value="CHECKSTYLE\:OFF ([\w\|]+)"/>
        <property name="onCommentFormat" value="CHECKSTYLE\:ON ([\w\|]+)"/>
        <property name="checkFormat" value="$1"/>
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header"> -->
    <!--   <property name="headerFile" value="${checkstyle.header.file}"/> -->
    <!--   <property name="fileExtensions" value="java"/> -->
    <!-- </module> -->

    <module name="TreeWalker">

        <!-- SirsiDynix Modification: This is needed by the SuppressionCommentFilter -->
        <module name="FileContentsHolder"/>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <!-- SirsiDynix override - default is 'private' meaning all methods private and higher (i.e. all methods)
                 require Javadocs.  -->
            <!-- SD intent is that all methods OTHER THAN pure private require Javadocs.  -->
            <property name="scope" value="package"/>
            <!-- SirsiDynix override - default is false, meaning simple getters / setters need Javadocs -->
            <!-- SD intent is that simple setter / getter code doesn't need Javadocs -->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <module name="JavadocType"/>
        <!-- SirsiDynix Modification -->
        <!-- module name="JavadocVariable"/-->
        <!-- SirsiDynix Modification -->
        <!-- module name="JavadocStyle"/-->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <!-- SirsiDynix Modification -->
        <module name="PackageName">
            <property name="format" value="^[a-z][a-z0-9]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!-- SirsiDynix Modification -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>

        <module name="MethodLength"/>
        <module name="ParameterNumber"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- SirsiDynix Modification -->
        <!--module name="AvoidInlineConditionals"/-->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!-- SirsiDynix Modification -->
        <!--module name="HiddenField"/-->
        <!-- SirsiDynix Modification -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean,java.lang.Integer,java.lang.Long,java.lang.Byte,java.lang.Double,java.lang.Float,java.lang.Short,java.math.BigDecimal,java.math.BigInteger"/>
        </module>
        <module name="InnerAssignment"/>
        <!-- SirsiDynix Modification -->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1,0,1,2,3,4,5"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <!-- SirsiDynix Modification -->
        <module name="CovariantEquals"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- SirsiDynix Modification -->
        <!--module name="DesignForExtension"/-->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier"/>
        <!-- SirsiDynix Modification -->
        <module name="CyclomaticComplexity"/>
        <!-- SirsiDynix Modification -->
        <module name="NPathComplexity"/>
        <!-- SirsiDynix Modification -->
        <module name="JavaNCSS"/>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!-- SirsiDynix Modification -->
        <!--module name="FinalParameters"/-->
        <!-- SirsiDynix Modification -->
        <module name="TodoComment">
            <property name="format" value="[Tt][Oo][Dd][Oo][ :]"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="UpperEll"/>
    </module>
</module>
